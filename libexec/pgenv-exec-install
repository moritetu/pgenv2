#!/usr/bin/env bash

set -eu

source "$PGENV_LIBEXEC"/pgenv--load

# Command line options
declare -A options
options=(
  [world]=0
  [alias]=
  [debug]=0
  [g3]=0
  [refresh]=0
  [optsfile]=
  [configure_opts]=""
  [install_dir]=
  [force]=0
  [only_install]=0
  [verbose]=0
)

# Arguments array
arguments=()


# Make required directories.
(
  cd "$PGENV_ROOT"
  mkdir -p "$PGENV_VERSIONS_DIR" "$PGENV_ARCHIVE_DIR" "$PGENV_SOURCE_DIR"
)

# Source url
source_url=

# Install version
pg_install_version=

# Archive file name
pg_archive_file=

# Expanded directory
pg_expanded_dir=

# Build environment.
pg_build_env="$PWD/pgenv_build_env"

# Configure options used by default
default_configure_options_file="$PGENV_ROOT/configure_options"

# Local configure options.
local_configure_options_file="$PWD/pgenv_configure_opts"

# Configure options
configure_options=""


#: parse_options [arg ...]
#:   Parse command line options.
#:
parse_options() {
  while [ $# -gt 0 ]; do
    case "$1" in
      -d|--debug)      options[debug]=1         ;;
      -r|--refresh)    options[refresh]=1       ;;
      -f|--force)      options[force]=1         ;;
      -w|--world)      options[world]=1         ;;
      -v|--verbose)    options[verbose]=1       ;;
      --g3)            options[g3]=1            ;;
      --only-install)  options[only_install]=1  ;;
      -a|--alias)
        shift
        options[alias]="$1"
        ;;
      --configure-options)
        shift
        options[configure_opts]="$1"
        ;;
      --configure-options-file)
        shift
        options[optsfile]="$(resolve_link "$1")"
        if [ -e "${options[optsfile]}" ]; then
          abort "error: file not found: $1"
        fi
        ;;
      --install-dir)
        shift
        options[install_dir]="$(resolve_link "$1")"
        mkdir -p "${options[install_dir]}"
        if [ $? -ne 0 ]; then
          abort "error: could not make directory: '${options[install_dir]}'"
        fi
        ;;
      -*)
        abort "error: $(self): invalid option: $1"
        ;;
      *)
        arguments[${#arguments[@]}]="$1"
        ;;
    esac
    shift
  done

  if [ ${#arguments[@]} -eq 0 ]; then
    error "error: <version> is empty"
    abort "hint: please set install version: ex) install 9.6.9"
  fi

  # Basic settings.
  pg_install_version="${arguments[0]}"

  source_url="$(printf "$PGENV_POSTGRESQL_SOURCE_FORMAT" "$pg_install_version" "$pg_install_version")"

  pg_archive_file="$(basename -- "$source_url")"

  pg_expanded_dir="${pg_archive_file%.tar.gz}"
}


#: read_configure_options <file>
#:   Read configure options from the file.
#:
read_configure_options() {
  local line
  local configure_options_file="$1"
  if [ -f "$configure_options_file" ]; then
    log_info "read configure options from '$configure_options_file'"
    while read line; do
	    test "$line" = "" && continue
      # Skip the line starts with '#'.
	    test "${line:0:1}" = "#" && continue
	    configure_options="$line $configure_options"
    done < "$configure_options_file"
  fi
}


#: install_pg
#:   Install postgresql.
#:
install_pg() {
  local status=0
  local source_dir=
  local install_dirname=
  local configure_version_options=
  local install_log=

  # Change working directory.
  cd "$PGENV_ROOT"

  if [ ${options[only_install]} -ne 1 ]; then
    if [ ! -f "$PGENV_ARCHIVE_DIR/$pg_archive_file" ]; then
      log_info "==> download $source_url"
      $PGENV_CURL -f -o "$PGENV_ARCHIVE_DIR/$pg_archive_file" "$source_url"
    fi
  fi

  # If alias option, we rename expanded directory.
  if [ -n "${options[alias]:-""}" ]; then
    source_dir="$PGENV_SOURCE_DIR/${options[alias]}"
    install_dirname="${options[alias]}"
    configure_version_options="${options[alias]}"
  else
    source_dir="$PGENV_SOURCE_DIR/$pg_install_version"
    install_dirname="$pg_install_version"
    configure_version_options="$pg_install_version"
  fi

  install_log="$PGENV_LOGS_DIR/${install_dirname}_install.log"

  if [ ${options[only_install]} -ne 1 ]; then
    # Expand the archive file.
    log_trace "==> expand '$PGENV_ARCHIVE_DIR/$pg_archive_file'"
    (
      cd "$PGENV_ARCHIVE_DIR"
      tar xzf "$pg_archive_file"
    )
    if [ -s "$source_dir" ]; then
      log_warn "source already exists: '$source_dir'"
      if [ ${options[force]} -eq 1 ]; then
        log_info "==> overwrite source: '$source_dir'"
        rm -rf "$source_dir"
        mv "$PGENV_ARCHIVE_DIR/$pg_expanded_dir" "$source_dir"
      else
        log_warn "if overwrite, execute with '-f' option."
        exit 1
      fi
    else
      log_trace "store source into '$source_dir'"
      mv "$PGENV_ARCHIVE_DIR/$pg_expanded_dir" "$source_dir"
    fi
  fi

  # Construct configure options.
  log_info "==> build configure options"

  # Truncate log
  log_trace "truncate: $install_log"
  :> "$install_log"

  # If refresh option, execute 'make clean'.
  if [ ${options[refresh]} -eq 1 ]; then
    log_info "==> make clean"
    if [ ${options[verbose]} -eq 1 ]; then
      make clean |& tee -a "$install_log"
    else
      make clean >> "$install_log" 2>&1
    fi
  fi

  local configure_options_file="$default_configure_options_file"

  # If configure_options-xxx, use it.
  if [ -f "$PGENV_ROOT/configure_options-${configure_version_options}" ]; then
    configure_options_file="$PGENV_ROOT/configure_options-${configure_version_options}"
  fi

  # If configure file option, use it.
  if [ -n "${options[optsfile]:-""}" ]; then
    configure_options_file="${options[optsfile]}"
  fi

  log_info "configure options file: $configure_options_file"
  # Read configure options from the file.
  read_configure_options "$configure_options_file"
  # If local configure options file, read it too.
  read_configure_options "$local_configure_options_file"

  # If configure options option, add them.
  if [ -n "${options[configure_opts]}" ]; then
    configure_options="${options[configure_opts]} $configure_options"
  fi

  # Add '--prefix'.
  if [ -n "${options[install_dir]}" ]; then
    mkdir -p "${options[install_dir]}"
    configure_options="$configure_options --prefix=\"${options[install_dir]}\""
  else
    mkdir -p "$PGENV_VERSIONS_DIR/$install_dirname"
    configure_options="$configure_options --prefix=\"$PGENV_ROOT/$PGENV_VERSIONS_DIR/$install_dirname\""
  fi

  # If debug option, add '--enable-debug'.
  if [ ${options[debug]} -eq 1 ]; then
    configure_options="$configure_options --enable-debug"
  fi

  log_info "$configure_options"

  # Build!
  log_info "log: $install_log (pgenv prefix --root cat $install_log)"
  log_info "==> configure"

  status=0
  if [ ${options[verbose]} -eq 1 ]; then
    (
      if [ -f "$pg_build_env" ]; then
        log_trace "include: $pg_build_env"
        source "$pg_build_env" "configure"
      fi
      # configure
      cd "$source_dir"
      chmod +x configure
      eval "./configure ${configure_options}"
    ) |& tee -a "$install_log" || status=$?
  else
    (
      if [ -f "$pg_build_env" ]; then
        log_trace "include: $pg_build_env"
        source "$pg_build_env" "configure"
      fi
      # configure
      cd "$source_dir"
      chmod +x configure
      eval "./configure ${configure_options}"
    ) >> "$install_log" 2>&1 || status=$?

  fi

  if [ $status -ne 0 ]; then
    log_error "failed to configure"
    abort "hint: please check configure options: see 'pgenv prefix --root cat $install_log'"
  fi

  # Change optimization level.
  if [ ${options[debug]} -eq 1 ]; then
    log_info "==> replace CFLAGS '-O0'"
    local makefile_g="$source_dir/src/Makefile.global"
    local makefile_g_bak="$source_dir/src/Makefile.global.bak"
    local gx=""
    if [ ${options[g3]} -eq 1 ]; then
      gx="-g3"
    fi
    log_trace "sed -e 's/ -g -O2/ $gx -O0/' $makefile_g"
    sed -e "s/ -g -O2/ $gx -O0/" "$makefile_g" > "$makefile_g_bak"
    mv -f "$makefile_g_bak" "$makefile_g"
  fi

  # Make install.
  status=0
  local make_command=
  if [ ${options[world]} -eq 1 ]; then
    make_command=install-world
  else
    make_command=install
  fi

  log_info "==> make $make_command"
  if [ ${options[verbose]} -eq 1 ]; then
    (
      if [ -f "$pg_build_env" ]; then
        log_trace "include: $pg_build_env"
        source "$pg_build_env" "configure"
      fi

      cd "$source_dir"
      make $make_command
    ) |& tee -a "$install_log" || status=$?
  else
    (
      if [ -f "$pg_build_env" ]; then
        log_trace "include: $pg_build_env"
        source "$pg_build_env" "configure"
      fi

      cd "$source_dir"
      make $make_command
    ) >> "$install_log" 2>&1 || status=$?
  fi

  if [ $status -ne 0 ]; then
    log_error "failed to make $make_command"
    abort "see 'pgenv prefix --root cat $install_log'"
  fi

  if [ ${options[only_install]} -ne 1 ]; then
    # If '--install-dir' option, create the link to the installed directory.
    if [ -n "${options[install_dir]}" ]; then
      log_info "==> link '$PGENV_VERSIONS_DIR/$install_dirname' => '${options[install_dir]}'"
      ln -snf "${options[install_dir]}" "$PGENV_VERSIONS_DIR/$install_dirname"
    fi
  fi
}

# Parse command line options.
parse_options "$@"

# Build and make install.
install_pg

exit $?


#=begin COMMAND
#
# install     Install postgresql with the specified version.
#
#=end COMMAND

#=begin HELP
#
# Usage: pgenv install [-d|--debug] [--O3] [--configure-options-file <file>] [--configure-options "<options>"]
#                      [-r|--refresh|-f|--force] [-w|--world]
#                      [-a|-alias <name>] [-v|--verbose] [--install-dir <dir>]
#                      [--only-install] <version>
#
# Build postgresql.
#
#
# SYNOPSIS
#   pgenv install --debug -v 10.3
#   pgenv install --alias my10.3 --configure-options-file ./my10.3-configure-options --debug 10.3
#   pgenv install --install-dir /path/to/test10.3 --alias test10.3 10.3
#   pgenv install --install-dir /path/to/debug1 --only-install 10.3
#
# OPTIONS
#   -a, --alias <name>
#     Set alias name.
#
#   -d, --debug
#     Build with the debug mode (with --enable-debug).
#
#   --configure-options-file <file>
#     Specify the file where options passed to 'configure' command are written.
#
#   --configure-options <options>
#     The options passed to 'configure' command.
#
#   -f, --force
#     Remove existed source before install and expand source.
#
#   -r, --refresh
#     Execute 'make clean' before build.
#
#   -w, --world
#     Use make world.
#
#   --install-dir <dir>
#     The directory install postgresql. Default is $PGENV_ROOT/versions.
#
#   --only-install
#     Build and install with existed source. It is useful for changing the source at development time
#     and confirming operation.
#
#    -v, --verbose
#     Show logs during installing.
#
#  CONFIGURE_OPTIONS
#    Configure options are read with the following priority:
#      1. $PGENV_ROOT/configure_options-<version>
#      2. $PGENV_ROOT/configure_options
#      3. $PWD/pgenv_configure_opts
#
#    You can edit with `pgenv configure` command.
#
#  BUILD_ENVIRONMENT
#    If the following file exists, it is read before configure or make.
#      - $PWD/pgenv_build_env
#
#
#=end HELP
