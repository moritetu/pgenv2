#!/usr/bin/env bash

set -eu

source "$PGENV_LIBEXEC"/pgenv--load
source "$PGENV_LIBEXEC"/pgenv--cluster-functions


# Command line options
declare -A options
options=(
  [version]=""
  [synchronous_standby_servers]=""
  [asynchronous_standby_servers]=""
  [initdb_options]=""
  [start_port]=24312
  [dry_run]=0
)


# Arguments array
arguments=()


OLDPWD="$PWD"


#: parse_options [arg ...]
#:   Parse command line options.
#:
parse_options() {
  local status=0

  while [ $# -gt 0 ]; do
    case "$1" in
      -s|--sync-standby)
        shift
        options[synchronous_standby_servers]="${options[synchronous_standby_servers]} $1"
        ;;
      -a|--async-standby)
        shift
        options[asynchronous_standby_servers]="${options[asynchronous_standby_servers]} $1"
        ;;
      -o|--initdb-options)
        shift
        options[initdb_options]="$1"
        ;;
      -v|--version)
        shift
        options[version]="$1"
        ;;
      -p|--start-port)
        shift
        options[start_port]="$1"
        ;;
      -d|--dry-run)
        options[dry_run]=1
        ;;
      -*)
        abort "error: $(self): invalid option: $1"
        ;;
      *)
        arguments[${#arguments[@]}]="$1"
        ;;
    esac
    shift
  done

  if [ ${#arguments[@]} -eq 0 ]; then
    error "error: <primary> is not set"
    abort "hint: please set <primary>"
  fi

  pg_setup_version="$(pgenv current)"

  # Check whether version is valid.
  if [ -n "${options[version]}" ]; then
    ( cd "$PGENV_ROOT" && test -e  "$PGENV_VERSIONS_DIR"/"${options[version]}" ) || status=$?
    if [ $status -ne 0 ]; then
      error "error: version is invalid: ${options[version]}"
      abort "hint: ${options[version]} exists ? (pgenv list)"
    fi
    pg_setup_version="${options[version]}"
  fi

  pg_start_port="${options[start_port]}"
}


#: configure_cluster_setting
#:   Configure setting to construct a cluster.
#:
configure_cluster_setting() {
  local instance_info=()
  local tmparr=()
  local server=
  local i=

  # Set global variable.
  primary_server="${arguments[0]}"
  instance_info=( $(split_instance_strings "$primary_server") )
  test ${instance_info[1]:-0} -eq 0 && {
    log_trace "assign port: instance=${instance_info[0]} port=$pg_start_port"
    primary_port="$pg_start_port"
    ((pg_start_port+=1))
  }

  # Convert text to array.
  i=0
  tmparr=( ${options[synchronous_standby_servers]:-} )
  if [ ${#tmparr[@]} -gt 0 ]; then
    for server in "${tmparr[@]:-""}"; do
      # Check whether instance name is used.
      if [ -n "$(hash_get "$server")" ]; then
        error "error: instance name '$server' is already used"
        abort "hint: set other instance name"
      fi

      instance_info=( $(split_instance_strings "$server") )
      test ${instance_info[1]:-0} -eq 0 && {
        log_trace "assign port: instance=${instance_info[0]} port=$pg_start_port"
        synchronous_standby_ports[$i]="$pg_start_port"
        ((pg_start_port+=1))
      }

      synchronous_standby_servers[$i]="$server"
      let i+=1
      hash_set "$server" 1
    done
  fi

  i=0
  tmparr=( ${options[asynchronous_standby_servers]:-} )
  if [ ${#tmparr[@]} -gt 0 ]; then
    for server in "${tmparr[@]:-""}"; do
      # Check whether instance name is used.
      if [ -n "$(hash_get "$server")" ]; then
        error "error: instance name '$server' is already used"
        abort "hint: set other instance name"
      fi

      instance_info=( $(split_instance_strings "$server") )
      test ${instance_info[1]:-0} -eq 0 && {
        log_trace "assign port: instance=${instance_info[0]} port=$pg_start_port"
        asynchronous_standby_ports[$i]="$pg_start_port"
        ((pg_start_port+=1))
      }

      asynchronous_standby_servers[$i]="$server"
      let i+=1
      hash_set "$server" 1
    done
  fi

  all_standby_servers=( ${synchronous_standby_servers[@]:-} ${asynchronous_standby_servers[@]:-} )
  all_standby_ports=( ${synchronous_standby_ports[@]:-} ${asynchronous_standby_ports[@]:-} )
}


#: setup_cluster
#:
#:
setup_cluster() {
  local status=0
  local instance_info=()
  local i=0

  add_trap_callback "EXIT" "cleanup_cluster"

  # From here, switch pwd to PGENV_CLUSTER_ROOT
  log_info "==> configure cluster settings"
  configure_cluster_setting

  log_info "cluster root directory: $(resolve_link "$PGENV_CLUSTER_ROOT")"
  log_info "version: $pg_setup_version"

  log_info "==> primary"
  log_info "$primary_server:$primary_port"

  log_info "==> standby(sync)"
  for ((i=0 ; i < ${#synchronous_standby_servers[@]}; i++)); do
    log_info "${synchronous_standby_servers[$i]}:${synchronous_standby_ports[$i]}"
  done

  log_info "==> standby(async)"
  for ((i=0 ; i < ${#asynchronous_standby_servers[@]}; i++)); do
    log_info "${asynchronous_standby_servers[$i]}:${asynchronous_standby_ports[$i]}"
  done

  # If dry-ryn option, stop here.
  if [ ${options[dry_run]} -eq 1 ]; then
    exit
  fi

  # Make a cluster root directory and change current directory to the directory.
  mkdir -p "$PGENV_CLUSTER_ROOT"

  #
  # Setup primary server
  #
  log_info "==> setup primary: $primary_server"
  log_info "primary: $primary_server:$primary_port"

  status=0
  create_instance "$primary_server" "${options[initdb_options]}" || status=$?
  if [ $status -ne 0 ]; then
    log_error "failed to initdb"
    abort "stop"
  fi

  local standby_num=$(( ${#synchronous_standby_servers[@]} + ${#asynchronous_standby_servers[@]} ))

  (
    cd "$PGENV_CLUSTER_ROOT"
    local archive_dir="$(resolve_link archivedir_${primary_server})"
    local include_file="$(resolve_link "${primary_server}.conf")"

    # Create include file for primary
    log_info "create include file for primary: $include_file"
    cat <<EOF > "$include_file"
port = $primary_port
max_wal_senders = $((10 + $standby_num))
wal_keep_segments = 16
wal_level = logical
archive_mode = on
archive_command = 'test ! -f "$archive_dir/%f" && cp %p "$archive_dir/%f"'
logging_collector = on
#log_min_messages = warning
log_filename = 'postgresql-%Y-%m-%d.log'
#log_statement = 'none'			# none, ddl, mod, all
log_checkpoints = on
synchronous_standby_names = '$(join_strings "," "${synchronous_standby_servers[@]}")'
hot_standby = on
EOF

    # Set include file (to overwrite settings)
    replace_string_in_file "del" "$primary_server/postgresql.conf" \
                           "include = " "include = '$include_file'"

    # Enable connection for replication from standby servers.
    replace_string_in_file "replace" "$primary_server/pg_hba.conf" \
                           "^#\\(local .*replication.*\\)" "\\1"
    replace_string_in_file "replace" "$primary_server/pg_hba.conf" \
                           "^#\\(host .*replication.*\\)" "\\1"

    log_trace "create archive directory: $archive_dir"
    mkdir -p "$archive_dir"
  )

  log_info "start primary instance"
  start_instance "$primary_server"

  #
  # Setup standby servers
  #
  log_info "==> setup standby servers: ${all_standby_servers[@]:-""}"
  for ((i=0 ; i < ${#all_standby_servers[@]}; i++)); do
    local standby_server="${all_standby_servers[$i]}"
    local standby_port="${all_standby_ports[$i]}"

    log_info "primary --> ${all_standby_servers[$i]}:${all_standby_ports[$i]}"
    log_info "standby: $standby_server:$standby_port"

    status=0
    do_basebackup "$standby_server" || status=$?
    if [ $status -ne 0 ]; then
      log_error "failed to do pg_basebackup"
      abort "stop"
    fi

    local pgver=$(current_pg_version)
    (
      cd "$PGENV_CLUSTER_ROOT"
      local archive_dir="$(resolve_link archivedir_${standby_server})"
      local include_file="$(resolve_link ${standby_server}.conf)"
      local port="$pg_start_port"
      # Create include file for standby
      log_info "create include file for standby: $include_file"

      cat <<EOF > "$include_file"
port = $standby_port
wal_keep_segments = 16
hot_standby = on
logging_collector = on
log_filename = 'postgresql-%Y-%m-%d.log'
#log_min_messages = warning
max_wal_senders = $((10 + $standby_num))
archive_command = 'test ! -f "$archive_dir/%f" && cp %p "$archive_dir/%f"'
EOF
      # Set include file (to overwrite settings)
      replace_string_in_file "del" "$standby_server/postgresql.conf" \
                             "include = " "include = '$include_file'"

      if version_later_than 12 &> /dev/null; then
        cat <<EOF >> "${standby_server}.conf"
recovery_target_timeline = 'latest'
#restore_command = 'cp "$(resolve_link "archivedir")/%f" "%p"'
EOF
      else
        cat <<EOF >> "$standby_server/recovery.conf"
recovery_target_timeline = 'latest'
#restore_command = 'cp "$(resolve_link "archivedir")/%f" "%p"'
EOF
      fi
      mkdir -p "$archive_dir"
    )

    log_info "start standby instance"
    status=0
    start_instance "$standby_server" || status=$?
    if [ $status -ne 0 ]; then
      log_warn "failed start instance: $standby_server"
    fi
  done
}


#: show_hint_operation
#:   Show hint operation.
#:
show_hint_operation() {
  text_color_on 7 "" ""

  cd "$PGENV_CLUSTER_ROOT"

  cat <<EOF

  Check whether processes are running.
    $ ps aux | grep [p]ostgres

  Primary Server:
    # Connect to server.
      $ psql -p $primary_port -d postgres

    # Check replication.
      $ psql -p $primary_port -d postgres -c 'select * from pg_stat_replication;'

  Standby Servers:
EOF

  local i=0 server="" port=""
  println "    # Connect to server"
  for ((i=0; i < ${#all_standby_servers[@]}; i++)); do
    println "      $ psql -p ${all_standby_ports[$i]} -d postgres"
  done

  println ""
  println "    # Check last received wal location"
  for ((i=0; i < ${#all_standby_servers[@]}; i++)); do
    if [ "${pg_setup_version%%.*}" = "10" ]; then
      println "      $ psql -p ${all_standby_ports[$i]} -d postgres -c 'select pg_last_wal_receive_lsn();'"
    else
      println "      $ psql -p ${all_standby_ports[$i]} -d postgres -c 'select pg_last_xlog_receive_location();'"
    fi
  done

  println ""

  cat <<EOF
  Stop instance:
    $ pg_ctl stop -D $(resolve_link "$primary_server")
EOF

  for ((i=0; i < ${#all_standby_servers[@]}; i++)); do
    println "    $ pg_ctl stop -D $(resolve_link "${all_standby_servers[$i]}")"
  done

  println ""
  text_color_off
}

#: cleanup_cluster
#:   Clean-up a cluster.
#:
cleanup_cluster() {
  if [ $pgenv_trap_exit_status -ne 0 ]; then
    log_trace "==> cleanup '$PGENV_CLUSTER_ROOT'"
    pgenv cluster -D "$PGENV_CLUSTER_ROOT" stop -a
    /bin/rm -rf "$PGENV_CLUSTER_ROOT"
  fi
}


# Parse command line options.
parse_options "$@"

# Setup my cluster.
setup_cluster

# Ok, save cluster information again.
write_cluster_info

# Show next step.
show_hint_operation

exit $?


#=begin SUBCOMMAND
#
# cluster setup   Setup a cluster on localhost which is useful for testing.
#
#=end SUBCOMMAND


#=begin HELP
#
# Usage: pgenv cluster setup [-s|--sync-standby <node>] [-a|--async-standby <node>]
#                            [--initdb-options <options>] [--start-port <port>]
#                            [--version <version] [-d|--dry-run]
#                            <primary>
#
# Setup a cluster running on localhost. This is useful for testing.
#
#
# SYNOPSIS
#   pgenv cluster -D /path/to/cluster setup primary
#   pgenv cluster -D /path/to/cluster setup -s s1 --start-port 10100 primary
#   pgenv cluster -D /path/to/cluster setup -s s1 -a a1 primary
#   pgenv cluster -D /path/to/cluster setup -s s1 -v 9.5 primary
#
# OPTIONS
#   -a, --async-standby <name>
#     Asynchronous standby server. <name> is the instance directory, it must not include
#     delimeter character like space.
#
#   -o, --initdb-options <options>
#     Options passed to 'initdb' command.
#
#   -s, --sync-standby <name>
#     Synchronous standby server. <name> is the instance directory, it must not include
#     delimeter character like space.
#
#   -v, --version <version>
#     Postgresql version used when setup a cluster.
#     Specify the version shown with 'pgenv list' command.
#
#   --start-port <port>
#     Starting port number, which must be integer.
#
#   -d, --dry-run
#     Dry run, not setup a cluster but show setup information.
#
#
#=end HELP
