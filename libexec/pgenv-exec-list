#!/usr/bin/env bash

set -eu

source "$PGENV_LIBEXEC"/pgenv--load

# Command line options
declare -A options
options=(
  [list]=0
  [verbose]=0
)

# Arguments array
arguments=()

status=0

# Current version
pg_current_version=""
cd -P -- "$PGENV_ROOT/$PGENV_DEFAULT_LINK" &> /dev/null || status=$?
if [ $status -eq 0 ]; then
  pg_current_version="$(basename -- "$(readlink "$PGENV_ROOT/$PGENV_DEFAULT_LINK")")"
fi



#: parse_options [arg ...]
#:   Parse command line options.
#:
parse_options() {
  while [ $# -gt 0 ]; do
    case "$1" in
      -l|--list)      options[list]=1     ;;
      -v|--verbose)   options[verbose]=1  ;;
      -*)
        abort "error: $(self): invalid option: $1"
        ;;
      *)
        arguments[${#arguments[@]}]="$1"
        ;;
    esac
    shift
  done
}


#: show_installed_versions
#:   Show installed versions.
#:
show_installed_versions() {
  local available_versions=()
  local version_directory=

  # Change working directory.
  cd "$PGENV_ROOT"

  # Get available versions
  log_trace "==> find '$PGENV_VERSIONS_DIR'"
  for version_directory in $(find "$PGENV_VERSIONS_DIR" -maxdepth 1 -mindepth 1 -type d)
  do
    available_versions[${#available_versions[@]}]="$(basename -- "$version_directory")"
  done

  for version_directory in $(find "$PGENV_VERSIONS_DIR" -maxdepth 1 -mindepth 1 -type l)
  do
    available_versions[${#available_versions[@]}]="$(basename -- "$version_directory")"
  done

  log_trace "==> ${available_versions[@]}"

  if [ ${#available_versions[@]} -lt 0 ]; then
    exit
  fi

  if [ ${options[list]} -eq 1 ]; then
    for version_directory in "${available_versions[@]}"; do
      echo "$version_directory"
    done
  else
    local pathinfo=""
    for version_directory in "${available_versions[@]}"; do
      if [ ${options[verbose]} -eq 1 ]; then
        pathinfo=" -> $(cd -P -- "$PGENV_VERSIONS_DIR/$version_directory" && pwd -P)"
      fi
      if [ "$pg_current_version" = "$version_directory" ]; then
        println "$(text_color_success "* $(printf "%-10s %s" "${version_directory}" "${pathinfo}")")"
      else
        println "  $(printf "%-10s %s" "${version_directory}" "${pathinfo}")"
      fi
      pathinfo=""
    done
  fi
}

# Parse command line options.
parse_options "$@"

# Show installed versions and current version.
show_installed_versions

exit $?


#=begin COMMAND
#
# list        Show installed versions.
#
#=end COMMAND

#=begin HELP
#
# Usage: pgenv list [-v|--verbose|-l|--list]
#
# Show installed versions.
#
#
# SYNOPSIS
#   pgenv list
#   pgenv list -v
#   pgenv list -l
#
# OPTIONS
#   -v, --verbose
#     Show verbose output.
#
#   -l, --list
#     Show only installed versions.
#
#
#=end HELP
