#!/usr/bin/env bash
set -eu

HERE="$(cd -P $(dirname "${BASH_SOURCE:-$0}") && pwd -P)"

export PGENV_ROOT="${PGENV_ROOT:-$(dirname "$HERE")}"
export PGENV_LIBEXEC="$PGENV_ROOT/libexec"

source "$PGENV_LIBEXEC/pgenv--load"

export PGENV_LOG_LEVEL="${PGENV_LOG_LEVEL:-2}"

# Check whether the specified command is valid.
pgenv_exec_command() {
  local command_name="$1"
  local pgenv_exec_command_name="pgenv-exec-${command_name}"
  local exec_command="$(command -v "${pgenv_exec_command_name}" ||:)"
  [ -z "$exec_command" ] && abort "error: invalid command: $command_name"
  echo $exec_command
}

# Enable plugins
shopt -s nullglob
for bindir in "$PGENV_ROOT"/"$PGENV_PLUGINS_DIR"/*/bin; do
  PATH="${bindir}:$PATH"
done
shopt -u nullglob
export PATH="$PGENV_LIBEXEC":"$PGENV_ROOT/bin":"$PATH"


while [ $# -gt 0 ]; do
  COMMAND="$1"
  case "$COMMAND" in
    -v | --version ) pgenv-version && exit ;;
    -h | --help )    pgenv-help && exit    ;;
    --no-color)
      export PGENV_NOCOLOR=1
      ;;
    --debug)
      export PGENV_LOG_FORMAT='$(printf "(%s)" "$(basename "${BASH_SOURCE[1]}"):${BASH_LINENO[0]}") - $@'
      ;;
    --d[0-4])
      export PGENV_LOG_LEVEL="${1:3:1}"
      ;;
    -s|--silent)
      export PGENV_LOG_LEVEL="99"
      ;;
    *)
      # If the command equals "help", show usage of the command.
      # pgenv help <command>
      if [ "$COMMAND" = "help" ]; then
        shift
        [ -z "${1:-}" ] && pgenv-help && exit
        get_comment_block "$(pgenv_exec_command "$1")" "HELP"
        exit
      fi

      # If the command equals "config", show basic configuration of baut.
      if [ "$COMMAND" = "config" ]; then
        pgenv-config show
        exit
      fi

      exec_command="$(pgenv_exec_command "$COMMAND")"
      shift
      case "${1:-}" in
        -h | --help )
          get_comment_block "$exec_command" "HELP"
          exit
          ;;
        *)
          # Enable hooks
          function pgenv_hook() {
            local should_print=0
            local hook hookdir
            if [ "${1:-}" = "--print" ]; then
              should_print=1
              shift
            fi

            if [ "${pgenv_last_invoked_hookname:-}" != "${1}" ]; then
              pgenv_last_invoked_hookname="$1"
              pgenv_last_invoked_hooks=()
              shopt -s nullglob
              for hookdir in "$PGENV_ROOT"/hooks "$PGENV_ROOT"/"$PGENV_PLUGINS_DIR"/*/hooks ~/.pgenv/hooks; do
                for hook in "$hookdir"/"$pgenv_last_invoked_hookname"/*.bash; do
                  if [ "${BASH_SOURCE:-$0}" != "$hook" ]; then
                    pgenv_last_invoked_hooks[${#pgenv_last_invoked_hooks[@]}]="$hook"
                  fi
                done
              done
              shopt -u nullglob
            fi

            if (( should_print == 1 )); then
              echo "${pgenv_last_invoked_hooks[@]:-}"
            else
              if [ "${pgenv_hook_running:-}" = "1" ]; then
                echo "error: hook cannot be executed while other hook is running" >&2
                exit 1
              fi
              pgenv_hook_running=1
              shift
              for hook in ${pgenv_last_invoked_hooks[@]:-}; do
                source "$hook" "$@"
              done
              pgenv_hook_running=0
            fi
          }
          export -f pgenv_hook

          # Execute a command.
          export PGENV_EXEC_COMMAND="$COMMAND"
          if [ -x "$exec_command" ]; then
            exec "$exec_command" "$@"
          else
            exec bash "$exec_command" "$@"
          fi
          ;;
      esac
  esac
  shift
done

# No argument, show usage and abort.
pgenv-help -p | abort
